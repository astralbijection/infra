name: Build and check all targets

on:
  schedule:
    - cron: '0 6 * * 6'
  push: {}
  workflow_dispatch: {}
  workflow_call:
    inputs:
      sha:
        required: true
        type: string

env:
  target_flake: github:astralbijection/infra/${{ inputs.sha || github.sha }}

jobs:
  calculate-matrix:
    name: Calculate build matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - uses: cachix/cachix-action@v10
        with:
          name: astralbijection
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Calculate build matrix
        run: |
          GC_DONT_GC=1 nix build -o matrix.json ${{ env.target_flake }}#gh-ci-matrix

      - name: Set matrix output
        id: set-matrix
        run: |
          jq . matrix.json
          matrix=$(cat matrix.json)
          echo "::set-output name=matrix::$matrix"

  build-checks:
    name: ${{ matrix.target.name }}
    needs: calculate-matrix
    runs-on: "${{ matrix.target.os }}"
    strategy:
      fail-fast: false
      matrix: "${{ fromJson(needs.calculate-matrix.outputs.matrix).checks }}"

    steps:
      - name: Remove unnecessary packages
        run: | # partially stolen from https://github.com/easimon/maximize-build-space
          echo "=== Before pruning ==="
          df -h
          sudo rm -rf /usr/share /usr/local /opt || true
          echo
          echo "=== After pruning ==="
          df -h

      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            extra-platforms = aarch64-linux aarch64-darwin arm-linux
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@v10
        with:
          name: astralbijection
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Build target
        run: |
          GC_DONT_GC=1 nix build --show-trace ${{ env.target_flake }}#${{ matrix.target.target }}

  build-nix-containers:
    name: ${{ matrix.target.name }}
    needs: calculate-matrix
    runs-on: "${{ matrix.target.os }}"
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.calculate-matrix.outputs.matrix).nix-docker-images }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            extra-platforms = aarch64-linux aarch64-darwin arm-linux
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@v10
        with:
          name: astralbijection
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Build target
        run: |
          GC_DONT_GC=1 nix build --show-trace ${{ env.target_flake }}#${{ matrix.target.target }} -o result.tar.gz

      - name: Tag and upload Docker images
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          ref=${{ inputs.sha }}
          export branchtag=$([ $ref = "refs/heads/main" ] && echo latest || tr '/' '-' <<< "${ref##refs/heads/}")
          GC_DONT_GC=1 nix run ${{ env.target_flake }}#${{ matrix.target.target }} -- result.tar.gz ${{ inputs.sha }} $branchtag

  build-dockerfiles:
    runs-on: ubuntu-latest
    name: Dockerfile ${{ matrix.image }}
    needs: calculate-matrix
    strategy:
      fail-fast: false
      matrix: "${{ fromJson(needs.calculate-matrix.outputs.matrix).dockerfiles }}"
    permissions:
      contents: read
      packages: write

    env:
      registry: ghcr.io
      image_name: astralbijection/${{ matrix.image }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.registry }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.registry }}/${{ env.image_name }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: docker/${{ matrix.image }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


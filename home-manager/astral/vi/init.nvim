call plug#begin('~/.config/nvim/plugged')

" Not in pkgs.vimPlugins
Plug 'dkarter/bullets.vim' 

call plug#end()

let g:bullets_enabled_file_types = [
    \ 'markdown',
    \ 'text',
    \ 'gitcommit',
    \ 'scratch'
    \]

" Syntax adjustments
syntax on
filetype plugin indent on
autocmd BufNewFile,BufRead *.nvim set syntax=vim
autocmd BufNewFile,BufRead flake.lock set syntax=json
autocmd BufNewFile,BufRead coc-settings.json set syntax=jsonc

" Indentation settings and other stuff
set autoindent smartindent ignorecase smartcase number splitbelow
set tabstop=4 softtabstop=0 expandtab shiftwidth=4 smarttab

" Per-language changes
autocmd FileType haskell,nix,yaml,json,jsonc setlocal shiftwidth=2 softtabstop=2 expandtab

" Detect indent when reading existing file
autocmd BufRead * Sleuth

" Make coding look like sniping
set cursorline cursorcolumn

" Rulers for column lengths
highlight LongLineWarning ctermbg=yellow
autocmd FileType python call matchadd('LongLineWarning', '\%81v', 100)
call matchadd('LongLineWarning', '\%121v', 100)

" Enable rainbow
let g:rainbow_active = 1

" Nerdtree configs
let g:NERDTreeHijackNetrw = 1
func! Explorer()
    if !exists("g:NERDTree") 
        return
    endif

    if g:NERDTree.IsOpen()
        :NERDTreeClose
    elseif expand('%') != ''
        :NERDTreeFind
    else
        :NERDTree
    endif
endfunc
nnoremap <C-n> :call Explorer()<CR>

" Run make in a split terminal
func! MakeSplitTerm()
    exec "w"
    set splitbelow
    :sp
    :res -5
    term make
    set nonumber

    " go to end of the buffer
    :normal G
endfunc
noremap <leader>rr :call MakeSplitTerm()<CR>

